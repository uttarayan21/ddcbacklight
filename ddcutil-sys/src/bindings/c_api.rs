/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const DDCA_ERROR_DETAIL_MARKER: &[u8; 5] = b"EDTL\0";
pub const DDCA_EDID_MFG_ID_FIELD_SIZE: u32 = 4;
pub const DDCA_EDID_MODEL_NAME_FIELD_SIZE: u32 = 14;
pub const DDCA_EDID_SN_ASCII_FIELD_SIZE: u32 = 14;
pub const DDCA_DISPLAY_INFO_MARKER: &[u8; 5] = b"DDIN\0";
pub const DDCA_RO: u32 = 1024;
pub const DDCA_WO: u32 = 512;
pub const DDCA_RW: u32 = 256;
pub const DDCA_READABLE: u32 = 1280;
pub const DDCA_WRITABLE: u32 = 768;
pub const DDCA_STD_CONT: u32 = 128;
pub const DDCA_COMPLEX_CONT: u32 = 64;
pub const DDCA_SIMPLE_NC: u32 = 32;
pub const DDCA_COMPLEX_NC: u32 = 16;
pub const DDCA_NC_CONT: u32 = 2048;
pub const DDCA_WO_NC: u32 = 8;
pub const DDCA_NORMAL_TABLE: u32 = 4;
pub const DDCA_WO_TABLE: u32 = 2;
pub const DDCA_CONT: u32 = 192;
pub const DDCA_NC: u32 = 2104;
pub const DDCA_NON_TABLE: u32 = 2296;
pub const DDCA_TABLE: u32 = 6;
pub const DDCA_DEPRECATED: u32 = 1;
pub const DDCA_SYNTHETIC_VCP_FEATURE_TABLE_ENTRY: u32 = 32768;
pub const DDCA_PERSISTENT_METADATA: u32 = 4096;
pub const DDCA_USER_DEFINED: u32 = 16384;
pub const DDCA_SYNTHETIC: u32 = 8192;
pub const DDCA_FEATURE_METADATA_MARKER: &[u8; 5] = b"FMET\0";
pub const DDCA_CAP_VCP_MARKER: &[u8; 5] = b"DCVP\0";
pub const DDCA_CAPABILITIES_MARKER: &[u8; 5] = b"DCAP\0";
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub _prevchain: *mut *mut _IO_FILE,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::_prevchain"]
        [::std::mem::offset_of!(_IO_FILE, _prevchain) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_cookie_io_functions_t"]
        [::std::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
    ["Alignment of _IO_cookie_io_functions_t"]
        [::std::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::read"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
    ["Offset of field: _IO_cookie_io_functions_t::write"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::seek"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
    ["Offset of field: _IO_cookie_io_functions_t::close"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
};
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type va_list = __gnuc_va_list;
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type DDCA_Status = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDCA_Ddcutil_Version_Spec {
    pub major: u8,
    pub minor: u8,
    pub micro: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_Ddcutil_Version_Spec"]
        [::std::mem::size_of::<DDCA_Ddcutil_Version_Spec>() - 3usize];
    ["Alignment of DDCA_Ddcutil_Version_Spec"]
        [::std::mem::align_of::<DDCA_Ddcutil_Version_Spec>() - 1usize];
    ["Offset of field: DDCA_Ddcutil_Version_Spec::major"]
        [::std::mem::offset_of!(DDCA_Ddcutil_Version_Spec, major) - 0usize];
    ["Offset of field: DDCA_Ddcutil_Version_Spec::minor"]
        [::std::mem::offset_of!(DDCA_Ddcutil_Version_Spec, minor) - 1usize];
    ["Offset of field: DDCA_Ddcutil_Version_Spec::micro"]
        [::std::mem::offset_of!(DDCA_Ddcutil_Version_Spec, micro) - 2usize];
};
pub const DDCA_Build_Option_Flags_DDCA_BUILT_WITH_NONE: DDCA_Build_Option_Flags = 0;
pub const DDCA_Build_Option_Flags_DDCA_BUILT_WITH_USB: DDCA_Build_Option_Flags = 2;
pub const DDCA_Build_Option_Flags_DDCA_BUILT_WITH_FAILSIM: DDCA_Build_Option_Flags = 4;
pub type DDCA_Build_Option_Flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct ddca_error_detail {
    pub marker: [::std::os::raw::c_char; 4usize],
    pub status_code: DDCA_Status,
    pub detail: *mut ::std::os::raw::c_char,
    pub cause_ct: u16,
    pub causes: __IncompleteArrayField<*mut ddca_error_detail>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ddca_error_detail"][::std::mem::size_of::<ddca_error_detail>() - 24usize];
    ["Alignment of ddca_error_detail"][::std::mem::align_of::<ddca_error_detail>() - 8usize];
    ["Offset of field: ddca_error_detail::marker"]
        [::std::mem::offset_of!(ddca_error_detail, marker) - 0usize];
    ["Offset of field: ddca_error_detail::status_code"]
        [::std::mem::offset_of!(ddca_error_detail, status_code) - 4usize];
    ["Offset of field: ddca_error_detail::detail"]
        [::std::mem::offset_of!(ddca_error_detail, detail) - 8usize];
    ["Offset of field: ddca_error_detail::cause_ct"]
        [::std::mem::offset_of!(ddca_error_detail, cause_ct) - 16usize];
    ["Offset of field: ddca_error_detail::causes"]
        [::std::mem::offset_of!(ddca_error_detail, causes) - 24usize];
};
pub type DDCA_Error_Detail = ddca_error_detail;
pub const DDCA_Init_Options_DDCA_INIT_OPTIONS_NONE: DDCA_Init_Options = 0;
pub const DDCA_Init_Options_DDCA_INIT_OPTIONS_DISABLE_CONFIG_FILE: DDCA_Init_Options = 1;
pub const DDCA_Init_Options_DDCA_INIT_OPTIONS_CLIENT_OPENED_SYSLOG: DDCA_Init_Options = 2;
pub const DDCA_Init_Options_DDCA_INIT_OPTIONS_ENABLE_INIT_MSGS: DDCA_Init_Options = 4;
pub type DDCA_Init_Options = ::std::os::raw::c_uint;
pub const DDCA_Output_Level_DDCA_OL_TERSE: DDCA_Output_Level = 4;
pub const DDCA_Output_Level_DDCA_OL_NORMAL: DDCA_Output_Level = 8;
pub const DDCA_Output_Level_DDCA_OL_VERBOSE: DDCA_Output_Level = 16;
pub const DDCA_Output_Level_DDCA_OL_VV: DDCA_Output_Level = 32;
pub type DDCA_Output_Level = ::std::os::raw::c_uint;
pub const DDCA_Syslog_Level_DDCA_SYSLOG_NOT_SET: DDCA_Syslog_Level = -1;
pub const DDCA_Syslog_Level_DDCA_SYSLOG_NEVER: DDCA_Syslog_Level = 0;
pub const DDCA_Syslog_Level_DDCA_SYSLOG_ERROR: DDCA_Syslog_Level = 3;
pub const DDCA_Syslog_Level_DDCA_SYSLOG_WARNING: DDCA_Syslog_Level = 6;
pub const DDCA_Syslog_Level_DDCA_SYSLOG_NOTICE: DDCA_Syslog_Level = 9;
pub const DDCA_Syslog_Level_DDCA_SYSLOG_INFO: DDCA_Syslog_Level = 12;
pub const DDCA_Syslog_Level_DDCA_SYSLOG_VERBOSE: DDCA_Syslog_Level = 15;
pub const DDCA_Syslog_Level_DDCA_SYSLOG_DEBUG: DDCA_Syslog_Level = 18;
pub type DDCA_Syslog_Level = ::std::os::raw::c_int;
pub const DDCA_Stats_Type_DDCA_STATS_NONE: DDCA_Stats_Type = 0;
pub const DDCA_Stats_Type_DDCA_STATS_TRIES: DDCA_Stats_Type = 1;
pub const DDCA_Stats_Type_DDCA_STATS_ERRORS: DDCA_Stats_Type = 2;
pub const DDCA_Stats_Type_DDCA_STATS_CALLS: DDCA_Stats_Type = 4;
pub const DDCA_Stats_Type_DDCA_STATS_ELAPSED: DDCA_Stats_Type = 8;
pub const DDCA_Stats_Type_DDCA_STATS_ALL: DDCA_Stats_Type = 255;
pub type DDCA_Stats_Type = ::std::os::raw::c_uint;
pub type DDCA_Sleep_Multiplier = f64;
pub const DDCA_Capture_Option_Flags_DDCA_CAPTURE_NOOPTS: DDCA_Capture_Option_Flags = 0;
pub const DDCA_Capture_Option_Flags_DDCA_CAPTURE_STDERR: DDCA_Capture_Option_Flags = 1;
pub type DDCA_Capture_Option_Flags = ::std::os::raw::c_uint;
pub type DDCA_Display_Identifier = *mut ::std::os::raw::c_void;
pub type DDCA_Display_Ref = *mut ::std::os::raw::c_void;
pub type DDCA_Display_Handle = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDCA_MCCS_Version_Spec {
    pub major: u8,
    pub minor: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_MCCS_Version_Spec"][::std::mem::size_of::<DDCA_MCCS_Version_Spec>() - 2usize];
    ["Alignment of DDCA_MCCS_Version_Spec"]
        [::std::mem::align_of::<DDCA_MCCS_Version_Spec>() - 1usize];
    ["Offset of field: DDCA_MCCS_Version_Spec::major"]
        [::std::mem::offset_of!(DDCA_MCCS_Version_Spec, major) - 0usize];
    ["Offset of field: DDCA_MCCS_Version_Spec::minor"]
        [::std::mem::offset_of!(DDCA_MCCS_Version_Spec, minor) - 1usize];
};
extern "C" {
    pub static DDCA_VSPEC_V10: DDCA_MCCS_Version_Spec;
}
extern "C" {
    pub static DDCA_VSPEC_V20: DDCA_MCCS_Version_Spec;
}
extern "C" {
    pub static DDCA_VSPEC_V21: DDCA_MCCS_Version_Spec;
}
extern "C" {
    pub static DDCA_VSPEC_V30: DDCA_MCCS_Version_Spec;
}
extern "C" {
    pub static DDCA_VSPEC_V22: DDCA_MCCS_Version_Spec;
}
extern "C" {
    pub static DDCA_VSPEC_ANY: DDCA_MCCS_Version_Spec;
}
extern "C" {
    pub static DDCA_VSPEC_UNKNOWN: DDCA_MCCS_Version_Spec;
}
extern "C" {
    pub static DDCA_VSPEC_UNQUERIED: DDCA_MCCS_Version_Spec;
}
pub type DDCA_Vcp_Feature_Code = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDCA_Feature_List {
    pub bytes: [u8; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_Feature_List"][::std::mem::size_of::<DDCA_Feature_List>() - 32usize];
    ["Alignment of DDCA_Feature_List"][::std::mem::align_of::<DDCA_Feature_List>() - 1usize];
    ["Offset of field: DDCA_Feature_List::bytes"]
        [::std::mem::offset_of!(DDCA_Feature_List, bytes) - 0usize];
};
extern "C" {
    pub static DDCA_EMPTY_FEATURE_LIST: DDCA_Feature_List;
}
pub const DDCA_Feature_Subset_Id_DDCA_SUBSET_UNSET: DDCA_Feature_Subset_Id = 0;
pub const DDCA_Feature_Subset_Id_DDCA_SUBSET_KNOWN: DDCA_Feature_Subset_Id = 1;
pub const DDCA_Feature_Subset_Id_DDCA_SUBSET_COLOR: DDCA_Feature_Subset_Id = 2;
pub const DDCA_Feature_Subset_Id_DDCA_SUBSET_PROFILE: DDCA_Feature_Subset_Id = 3;
pub const DDCA_Feature_Subset_Id_DDCA_SUBSET_MFG: DDCA_Feature_Subset_Id = 4;
pub const DDCA_Feature_Subset_Id_DDCA_SUBSET_CAPABILITIES: DDCA_Feature_Subset_Id = 5;
pub const DDCA_Feature_Subset_Id_DDCA_SUBSET_SCAN: DDCA_Feature_Subset_Id = 6;
pub const DDCA_Feature_Subset_Id_DDCA_SUBSET_CUSTOM: DDCA_Feature_Subset_Id = 7;
pub type DDCA_Feature_Subset_Id = ::std::os::raw::c_uint;
pub const DDCA_IO_Mode_DDCA_IO_I2C: DDCA_IO_Mode = 0;
pub const DDCA_IO_Mode_DDCA_IO_USB: DDCA_IO_Mode = 1;
pub type DDCA_IO_Mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DDCA_IO_Path {
    pub io_mode: DDCA_IO_Mode,
    pub path: DDCA_IO_Path__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DDCA_IO_Path__bindgen_ty_1 {
    pub i2c_busno: ::std::os::raw::c_int,
    pub hiddev_devno: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_IO_Path__bindgen_ty_1"]
        [::std::mem::size_of::<DDCA_IO_Path__bindgen_ty_1>() - 4usize];
    ["Alignment of DDCA_IO_Path__bindgen_ty_1"]
        [::std::mem::align_of::<DDCA_IO_Path__bindgen_ty_1>() - 4usize];
    ["Offset of field: DDCA_IO_Path__bindgen_ty_1::i2c_busno"]
        [::std::mem::offset_of!(DDCA_IO_Path__bindgen_ty_1, i2c_busno) - 0usize];
    ["Offset of field: DDCA_IO_Path__bindgen_ty_1::hiddev_devno"]
        [::std::mem::offset_of!(DDCA_IO_Path__bindgen_ty_1, hiddev_devno) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_IO_Path"][::std::mem::size_of::<DDCA_IO_Path>() - 8usize];
    ["Alignment of DDCA_IO_Path"][::std::mem::align_of::<DDCA_IO_Path>() - 4usize];
    ["Offset of field: DDCA_IO_Path::io_mode"]
        [::std::mem::offset_of!(DDCA_IO_Path, io_mode) - 0usize];
    ["Offset of field: DDCA_IO_Path::path"][::std::mem::offset_of!(DDCA_IO_Path, path) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DDCA_Display_Info {
    pub marker: [::std::os::raw::c_char; 4usize],
    pub dispno: ::std::os::raw::c_int,
    pub path: DDCA_IO_Path,
    pub usb_bus: ::std::os::raw::c_int,
    pub usb_device: ::std::os::raw::c_int,
    pub mfg_id: [::std::os::raw::c_char; 4usize],
    pub model_name: [::std::os::raw::c_char; 14usize],
    pub sn: [::std::os::raw::c_char; 14usize],
    pub product_code: u16,
    pub edid_bytes: [u8; 128usize],
    pub vcp_version: DDCA_MCCS_Version_Spec,
    pub dref: DDCA_Display_Ref,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_Display_Info"][::std::mem::size_of::<DDCA_Display_Info>() - 200usize];
    ["Alignment of DDCA_Display_Info"][::std::mem::align_of::<DDCA_Display_Info>() - 8usize];
    ["Offset of field: DDCA_Display_Info::marker"]
        [::std::mem::offset_of!(DDCA_Display_Info, marker) - 0usize];
    ["Offset of field: DDCA_Display_Info::dispno"]
        [::std::mem::offset_of!(DDCA_Display_Info, dispno) - 4usize];
    ["Offset of field: DDCA_Display_Info::path"]
        [::std::mem::offset_of!(DDCA_Display_Info, path) - 8usize];
    ["Offset of field: DDCA_Display_Info::usb_bus"]
        [::std::mem::offset_of!(DDCA_Display_Info, usb_bus) - 16usize];
    ["Offset of field: DDCA_Display_Info::usb_device"]
        [::std::mem::offset_of!(DDCA_Display_Info, usb_device) - 20usize];
    ["Offset of field: DDCA_Display_Info::mfg_id"]
        [::std::mem::offset_of!(DDCA_Display_Info, mfg_id) - 24usize];
    ["Offset of field: DDCA_Display_Info::model_name"]
        [::std::mem::offset_of!(DDCA_Display_Info, model_name) - 28usize];
    ["Offset of field: DDCA_Display_Info::sn"]
        [::std::mem::offset_of!(DDCA_Display_Info, sn) - 42usize];
    ["Offset of field: DDCA_Display_Info::product_code"]
        [::std::mem::offset_of!(DDCA_Display_Info, product_code) - 56usize];
    ["Offset of field: DDCA_Display_Info::edid_bytes"]
        [::std::mem::offset_of!(DDCA_Display_Info, edid_bytes) - 58usize];
    ["Offset of field: DDCA_Display_Info::vcp_version"]
        [::std::mem::offset_of!(DDCA_Display_Info, vcp_version) - 186usize];
    ["Offset of field: DDCA_Display_Info::dref"]
        [::std::mem::offset_of!(DDCA_Display_Info, dref) - 192usize];
};
#[repr(C)]
pub struct DDCA_Display_Info_List {
    pub ct: ::std::os::raw::c_int,
    pub info: __IncompleteArrayField<DDCA_Display_Info>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_Display_Info_List"][::std::mem::size_of::<DDCA_Display_Info_List>() - 8usize];
    ["Alignment of DDCA_Display_Info_List"]
        [::std::mem::align_of::<DDCA_Display_Info_List>() - 8usize];
    ["Offset of field: DDCA_Display_Info_List::ct"]
        [::std::mem::offset_of!(DDCA_Display_Info_List, ct) - 0usize];
    ["Offset of field: DDCA_Display_Info_List::info"]
        [::std::mem::offset_of!(DDCA_Display_Info_List, info) - 8usize];
};
pub type DDCA_Version_Feature_Flags = u16;
pub type DDCA_Global_Feature_Flags = u16;
pub type DDCA_Feature_Flags = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDCA_Feature_Value_Entry {
    pub value_code: u8,
    pub value_name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_Feature_Value_Entry"]
        [::std::mem::size_of::<DDCA_Feature_Value_Entry>() - 16usize];
    ["Alignment of DDCA_Feature_Value_Entry"]
        [::std::mem::align_of::<DDCA_Feature_Value_Entry>() - 8usize];
    ["Offset of field: DDCA_Feature_Value_Entry::value_code"]
        [::std::mem::offset_of!(DDCA_Feature_Value_Entry, value_code) - 0usize];
    ["Offset of field: DDCA_Feature_Value_Entry::value_name"]
        [::std::mem::offset_of!(DDCA_Feature_Value_Entry, value_name) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDCA_Feature_Metadata {
    pub marker: [::std::os::raw::c_char; 4usize],
    pub feature_code: DDCA_Vcp_Feature_Code,
    pub vcp_version: DDCA_MCCS_Version_Spec,
    pub feature_flags: DDCA_Feature_Flags,
    pub sl_values: *mut DDCA_Feature_Value_Entry,
    pub unused: *mut ::std::os::raw::c_void,
    pub feature_name: *mut ::std::os::raw::c_char,
    pub feature_desc: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_Feature_Metadata"][::std::mem::size_of::<DDCA_Feature_Metadata>() - 48usize];
    ["Alignment of DDCA_Feature_Metadata"]
        [::std::mem::align_of::<DDCA_Feature_Metadata>() - 8usize];
    ["Offset of field: DDCA_Feature_Metadata::marker"]
        [::std::mem::offset_of!(DDCA_Feature_Metadata, marker) - 0usize];
    ["Offset of field: DDCA_Feature_Metadata::feature_code"]
        [::std::mem::offset_of!(DDCA_Feature_Metadata, feature_code) - 4usize];
    ["Offset of field: DDCA_Feature_Metadata::vcp_version"]
        [::std::mem::offset_of!(DDCA_Feature_Metadata, vcp_version) - 5usize];
    ["Offset of field: DDCA_Feature_Metadata::feature_flags"]
        [::std::mem::offset_of!(DDCA_Feature_Metadata, feature_flags) - 8usize];
    ["Offset of field: DDCA_Feature_Metadata::sl_values"]
        [::std::mem::offset_of!(DDCA_Feature_Metadata, sl_values) - 16usize];
    ["Offset of field: DDCA_Feature_Metadata::unused"]
        [::std::mem::offset_of!(DDCA_Feature_Metadata, unused) - 24usize];
    ["Offset of field: DDCA_Feature_Metadata::feature_name"]
        [::std::mem::offset_of!(DDCA_Feature_Metadata, feature_name) - 32usize];
    ["Offset of field: DDCA_Feature_Metadata::feature_desc"]
        [::std::mem::offset_of!(DDCA_Feature_Metadata, feature_desc) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDCA_Cap_Vcp {
    pub marker: [::std::os::raw::c_char; 4usize],
    pub feature_code: DDCA_Vcp_Feature_Code,
    pub value_ct: ::std::os::raw::c_int,
    pub values: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_Cap_Vcp"][::std::mem::size_of::<DDCA_Cap_Vcp>() - 24usize];
    ["Alignment of DDCA_Cap_Vcp"][::std::mem::align_of::<DDCA_Cap_Vcp>() - 8usize];
    ["Offset of field: DDCA_Cap_Vcp::marker"]
        [::std::mem::offset_of!(DDCA_Cap_Vcp, marker) - 0usize];
    ["Offset of field: DDCA_Cap_Vcp::feature_code"]
        [::std::mem::offset_of!(DDCA_Cap_Vcp, feature_code) - 4usize];
    ["Offset of field: DDCA_Cap_Vcp::value_ct"]
        [::std::mem::offset_of!(DDCA_Cap_Vcp, value_ct) - 8usize];
    ["Offset of field: DDCA_Cap_Vcp::values"]
        [::std::mem::offset_of!(DDCA_Cap_Vcp, values) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDCA_Capabilities {
    pub marker: [::std::os::raw::c_char; 4usize],
    pub unparsed_string: *mut ::std::os::raw::c_char,
    pub version_spec: DDCA_MCCS_Version_Spec,
    pub cmd_ct: ::std::os::raw::c_int,
    pub cmd_codes: *mut u8,
    pub vcp_code_ct: ::std::os::raw::c_int,
    pub vcp_codes: *mut DDCA_Cap_Vcp,
    pub msg_ct: ::std::os::raw::c_int,
    pub messages: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_Capabilities"][::std::mem::size_of::<DDCA_Capabilities>() - 64usize];
    ["Alignment of DDCA_Capabilities"][::std::mem::align_of::<DDCA_Capabilities>() - 8usize];
    ["Offset of field: DDCA_Capabilities::marker"]
        [::std::mem::offset_of!(DDCA_Capabilities, marker) - 0usize];
    ["Offset of field: DDCA_Capabilities::unparsed_string"]
        [::std::mem::offset_of!(DDCA_Capabilities, unparsed_string) - 8usize];
    ["Offset of field: DDCA_Capabilities::version_spec"]
        [::std::mem::offset_of!(DDCA_Capabilities, version_spec) - 16usize];
    ["Offset of field: DDCA_Capabilities::cmd_ct"]
        [::std::mem::offset_of!(DDCA_Capabilities, cmd_ct) - 20usize];
    ["Offset of field: DDCA_Capabilities::cmd_codes"]
        [::std::mem::offset_of!(DDCA_Capabilities, cmd_codes) - 24usize];
    ["Offset of field: DDCA_Capabilities::vcp_code_ct"]
        [::std::mem::offset_of!(DDCA_Capabilities, vcp_code_ct) - 32usize];
    ["Offset of field: DDCA_Capabilities::vcp_codes"]
        [::std::mem::offset_of!(DDCA_Capabilities, vcp_codes) - 40usize];
    ["Offset of field: DDCA_Capabilities::msg_ct"]
        [::std::mem::offset_of!(DDCA_Capabilities, msg_ct) - 48usize];
    ["Offset of field: DDCA_Capabilities::messages"]
        [::std::mem::offset_of!(DDCA_Capabilities, messages) - 56usize];
};
pub const DDCA_Vcp_Value_Type_DDCA_NON_TABLE_VCP_VALUE: DDCA_Vcp_Value_Type = 1;
pub const DDCA_Vcp_Value_Type_DDCA_TABLE_VCP_VALUE: DDCA_Vcp_Value_Type = 2;
pub type DDCA_Vcp_Value_Type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDCA_Non_Table_Vcp_Value {
    pub mh: u8,
    pub ml: u8,
    pub sh: u8,
    pub sl: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_Non_Table_Vcp_Value"]
        [::std::mem::size_of::<DDCA_Non_Table_Vcp_Value>() - 4usize];
    ["Alignment of DDCA_Non_Table_Vcp_Value"]
        [::std::mem::align_of::<DDCA_Non_Table_Vcp_Value>() - 1usize];
    ["Offset of field: DDCA_Non_Table_Vcp_Value::mh"]
        [::std::mem::offset_of!(DDCA_Non_Table_Vcp_Value, mh) - 0usize];
    ["Offset of field: DDCA_Non_Table_Vcp_Value::ml"]
        [::std::mem::offset_of!(DDCA_Non_Table_Vcp_Value, ml) - 1usize];
    ["Offset of field: DDCA_Non_Table_Vcp_Value::sh"]
        [::std::mem::offset_of!(DDCA_Non_Table_Vcp_Value, sh) - 2usize];
    ["Offset of field: DDCA_Non_Table_Vcp_Value::sl"]
        [::std::mem::offset_of!(DDCA_Non_Table_Vcp_Value, sl) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDCA_Table_Vcp_Value {
    pub bytect: u16,
    pub bytes: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_Table_Vcp_Value"][::std::mem::size_of::<DDCA_Table_Vcp_Value>() - 16usize];
    ["Alignment of DDCA_Table_Vcp_Value"][::std::mem::align_of::<DDCA_Table_Vcp_Value>() - 8usize];
    ["Offset of field: DDCA_Table_Vcp_Value::bytect"]
        [::std::mem::offset_of!(DDCA_Table_Vcp_Value, bytect) - 0usize];
    ["Offset of field: DDCA_Table_Vcp_Value::bytes"]
        [::std::mem::offset_of!(DDCA_Table_Vcp_Value, bytes) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DDCA_Any_Vcp_Value {
    pub opcode: DDCA_Vcp_Feature_Code,
    pub value_type: DDCA_Vcp_Value_Type,
    pub val: DDCA_Any_Vcp_Value__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DDCA_Any_Vcp_Value__bindgen_ty_1 {
    pub t: DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_1,
    pub c_nc: DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_1 {
    pub bytes: *mut u8,
    pub bytect: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_1::bytes"]
        [::std::mem::offset_of!(DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_1, bytes) - 0usize];
    ["Offset of field: DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_1::bytect"]
        [::std::mem::offset_of!(DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_1, bytect) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_2 {
    pub mh: u8,
    pub ml: u8,
    pub sh: u8,
    pub sl: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Alignment of DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Offset of field: DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_2::mh"]
        [::std::mem::offset_of!(DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_2, mh) - 0usize];
    ["Offset of field: DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_2::ml"]
        [::std::mem::offset_of!(DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_2, ml) - 1usize];
    ["Offset of field: DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_2::sh"]
        [::std::mem::offset_of!(DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_2, sh) - 2usize];
    ["Offset of field: DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_2::sl"]
        [::std::mem::offset_of!(DDCA_Any_Vcp_Value__bindgen_ty_1__bindgen_ty_2, sl) - 3usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_Any_Vcp_Value__bindgen_ty_1"]
        [::std::mem::size_of::<DDCA_Any_Vcp_Value__bindgen_ty_1>() - 16usize];
    ["Alignment of DDCA_Any_Vcp_Value__bindgen_ty_1"]
        [::std::mem::align_of::<DDCA_Any_Vcp_Value__bindgen_ty_1>() - 8usize];
    ["Offset of field: DDCA_Any_Vcp_Value__bindgen_ty_1::t"]
        [::std::mem::offset_of!(DDCA_Any_Vcp_Value__bindgen_ty_1, t) - 0usize];
    ["Offset of field: DDCA_Any_Vcp_Value__bindgen_ty_1::c_nc"]
        [::std::mem::offset_of!(DDCA_Any_Vcp_Value__bindgen_ty_1, c_nc) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_Any_Vcp_Value"][::std::mem::size_of::<DDCA_Any_Vcp_Value>() - 24usize];
    ["Alignment of DDCA_Any_Vcp_Value"][::std::mem::align_of::<DDCA_Any_Vcp_Value>() - 8usize];
    ["Offset of field: DDCA_Any_Vcp_Value::opcode"]
        [::std::mem::offset_of!(DDCA_Any_Vcp_Value, opcode) - 0usize];
    ["Offset of field: DDCA_Any_Vcp_Value::value_type"]
        [::std::mem::offset_of!(DDCA_Any_Vcp_Value, value_type) - 4usize];
    ["Offset of field: DDCA_Any_Vcp_Value::val"]
        [::std::mem::offset_of!(DDCA_Any_Vcp_Value, val) - 8usize];
};
pub const DDCA_Display_Event_Type_DDCA_EVENT_DPMS_AWAKE: DDCA_Display_Event_Type = 0;
pub const DDCA_Display_Event_Type_DDCA_EVENT_DPMS_ASLEEP: DDCA_Display_Event_Type = 1;
pub const DDCA_Display_Event_Type_DDCA_EVENT_DISPLAY_CONNECTED: DDCA_Display_Event_Type = 2;
pub const DDCA_Display_Event_Type_DDCA_EVENT_DISPLAY_DISCONNECTED: DDCA_Display_Event_Type = 3;
pub const DDCA_Display_Event_Type_DDCA_EVENT_UNUSED1: DDCA_Display_Event_Type = 4;
pub const DDCA_Display_Event_Type_DDCA_EVENT_UNUSED2: DDCA_Display_Event_Type = 5;
pub type DDCA_Display_Event_Type = ::std::os::raw::c_uint;
pub const DDCA_Display_Event_Class_DDCA_EVENT_CLASS_NONE: DDCA_Display_Event_Class = 0;
pub const DDCA_Display_Event_Class_DDCA_EVENT_CLASS_DPMS: DDCA_Display_Event_Class = 1;
pub const DDCA_Display_Event_Class_DDCA_EVENT_CLASS_DISPLAY_CONNECTION: DDCA_Display_Event_Class =
    2;
pub const DDCA_Display_Event_Class_DDCA_EVENT_CLASS_UNUSED1: DDCA_Display_Event_Class = 4;
pub type DDCA_Display_Event_Class = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DDCA_Display_Status_Event {
    pub timestamp_nanos: u64,
    pub event_type: DDCA_Display_Event_Type,
    pub io_path: DDCA_IO_Path,
    pub connector_name: [::std::os::raw::c_char; 32usize],
    pub dref: DDCA_Display_Ref,
    pub unused: [*mut ::std::os::raw::c_void; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DDCA_Display_Status_Event"]
        [::std::mem::size_of::<DDCA_Display_Status_Event>() - 80usize];
    ["Alignment of DDCA_Display_Status_Event"]
        [::std::mem::align_of::<DDCA_Display_Status_Event>() - 8usize];
    ["Offset of field: DDCA_Display_Status_Event::timestamp_nanos"]
        [::std::mem::offset_of!(DDCA_Display_Status_Event, timestamp_nanos) - 0usize];
    ["Offset of field: DDCA_Display_Status_Event::event_type"]
        [::std::mem::offset_of!(DDCA_Display_Status_Event, event_type) - 8usize];
    ["Offset of field: DDCA_Display_Status_Event::io_path"]
        [::std::mem::offset_of!(DDCA_Display_Status_Event, io_path) - 12usize];
    ["Offset of field: DDCA_Display_Status_Event::connector_name"]
        [::std::mem::offset_of!(DDCA_Display_Status_Event, connector_name) - 20usize];
    ["Offset of field: DDCA_Display_Status_Event::dref"]
        [::std::mem::offset_of!(DDCA_Display_Status_Event, dref) - 56usize];
    ["Offset of field: DDCA_Display_Status_Event::unused"]
        [::std::mem::offset_of!(DDCA_Display_Status_Event, unused) - 64usize];
};
pub type DDCA_Display_Status_Callback_Func =
    ::std::option::Option<unsafe extern "C" fn(event: DDCA_Display_Status_Event)>;
extern "C" {
    pub fn ddca_ddcutil_version() -> DDCA_Ddcutil_Version_Spec;
}
extern "C" {
    pub fn ddca_ddcutil_version_string() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ddca_ddcutil_extended_version_string() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ddca_build_options() -> DDCA_Build_Option_Flags;
}
extern "C" {
    pub fn ddca_libddcutil_filename() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ddca_get_error_detail() -> *mut DDCA_Error_Detail;
}
extern "C" {
    pub fn ddca_free_error_detail(ddca_erec: *mut DDCA_Error_Detail);
}
extern "C" {
    pub fn ddca_report_error_detail(
        ddca_erec: *mut DDCA_Error_Detail,
        depth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ddca_rc_name(status_code: DDCA_Status) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ddca_rc_desc(status_code: DDCA_Status) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ddca_init(
        libopts: *const ::std::os::raw::c_char,
        syslog_level: DDCA_Syslog_Level,
        opts: DDCA_Init_Options,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_init2(
        libopts: *const ::std::os::raw::c_char,
        syslog_level_arg: DDCA_Syslog_Level,
        opts: DDCA_Init_Options,
        infomsg_loc: *mut *mut *mut ::std::os::raw::c_char,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_enable_verify(onoff: bool) -> bool;
}
extern "C" {
    pub fn ddca_is_verify_enabled() -> bool;
}
extern "C" {
    pub fn ddca_set_sleep_multiplier(multiplier: f64) -> f64;
}
extern "C" {
    pub fn ddca_get_sleep_multiplier() -> f64;
}
extern "C" {
    pub fn ddca_set_display_sleep_multiplier(
        dref: DDCA_Display_Ref,
        multiplier: DDCA_Sleep_Multiplier,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_get_current_display_sleep_multiplier(
        dref: DDCA_Display_Ref,
        multiplier_loc: *mut DDCA_Sleep_Multiplier,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_enable_dynamic_sleep(onoff: bool) -> bool;
}
extern "C" {
    pub fn ddca_is_dynamic_sleep_enabled() -> bool;
}
extern "C" {
    pub fn ddca_set_fout(fout: *mut FILE);
}
extern "C" {
    pub fn ddca_set_fout_to_default();
}
extern "C" {
    pub fn ddca_set_ferr(ferr: *mut FILE);
}
extern "C" {
    pub fn ddca_set_ferr_to_default();
}
extern "C" {
    pub fn ddca_start_capture(flags: DDCA_Capture_Option_Flags);
}
extern "C" {
    pub fn ddca_end_capture() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ddca_get_output_level() -> DDCA_Output_Level;
}
extern "C" {
    pub fn ddca_set_output_level(newval: DDCA_Output_Level) -> DDCA_Output_Level;
}
extern "C" {
    pub fn ddca_output_level_name(val: DDCA_Output_Level) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ddca_syslog_level_from_name(name: *const ::std::os::raw::c_char) -> DDCA_Syslog_Level;
}
extern "C" {
    pub fn ddca_reset_stats();
}
extern "C" {
    pub fn ddca_show_stats(
        stats: DDCA_Stats_Type,
        include_per_display_data: bool,
        depth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ddca_report_locks(depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ddca_get_display_refs(
        include_invalid_displays: bool,
        drefs_loc: *mut *mut DDCA_Display_Ref,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_get_display_info(
        ddca_dref: DDCA_Display_Ref,
        dinfo_loc: *mut *mut DDCA_Display_Info,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_free_display_info(info_rec: *mut DDCA_Display_Info);
}
extern "C" {
    pub fn ddca_get_display_info_list2(
        include_invalid_displays: bool,
        dlist_loc: *mut *mut DDCA_Display_Info_List,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_free_display_info_list(dlist: *mut DDCA_Display_Info_List);
}
extern "C" {
    pub fn ddca_report_display_info(
        dinfo: *mut DDCA_Display_Info,
        depth: ::std::os::raw::c_int,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_report_display_info_list(
        dlist: *mut DDCA_Display_Info_List,
        depth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ddca_report_displays(
        include_invalid_displays: bool,
        depth: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ddca_redetect_displays() -> DDCA_Status;
}
extern "C" {
    pub fn ddca_create_dispno_display_identifier(
        dispno: ::std::os::raw::c_int,
        did_loc: *mut DDCA_Display_Identifier,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_create_busno_display_identifier(
        busno: ::std::os::raw::c_int,
        did_loc: *mut DDCA_Display_Identifier,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_create_mfg_model_sn_display_identifier(
        mfg_id: *const ::std::os::raw::c_char,
        model: *const ::std::os::raw::c_char,
        sn: *const ::std::os::raw::c_char,
        did_loc: *mut DDCA_Display_Identifier,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_create_edid_display_identifier(
        edid: *const u8,
        did_loc: *mut DDCA_Display_Identifier,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_create_usb_display_identifier(
        bus: ::std::os::raw::c_int,
        device: ::std::os::raw::c_int,
        did_loc: *mut DDCA_Display_Identifier,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_create_usb_hiddev_display_identifier(
        hiddev_devno: ::std::os::raw::c_int,
        did_loc: *mut DDCA_Display_Identifier,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_free_display_identifier(did: DDCA_Display_Identifier) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_did_repr(did: DDCA_Display_Identifier) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ddca_create_display_ref(
        did: DDCA_Display_Identifier,
        dref_loc: *mut DDCA_Display_Ref,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_get_display_ref(
        did: DDCA_Display_Identifier,
        dref_loc: *mut DDCA_Display_Ref,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_validate_display_ref(
        dref: DDCA_Display_Ref,
        require_not_asleep: bool,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_dref_repr(dref: DDCA_Display_Ref) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ddca_dbgrpt_display_ref(dref: DDCA_Display_Ref, depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ddca_open_display2(
        ddca_dref: DDCA_Display_Ref,
        wait: bool,
        ddca_dh_loc: *mut DDCA_Display_Handle,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_close_display(ddca_dh: DDCA_Display_Handle) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_dh_repr(ddca_dh: DDCA_Display_Handle) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ddca_display_ref_from_handle(ddca_dh: DDCA_Display_Handle) -> DDCA_Display_Ref;
}
extern "C" {
    pub fn ddca_get_capabilities_string(
        ddca_dh: DDCA_Display_Handle,
        caps_loc: *mut *mut ::std::os::raw::c_char,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_parse_capabilities_string(
        capabilities_string: *mut ::std::os::raw::c_char,
        parsed_capabilities_loc: *mut *mut DDCA_Capabilities,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_free_parsed_capabilities(parsed_capabilities: *mut DDCA_Capabilities);
}
extern "C" {
    pub fn ddca_report_parsed_capabilities_by_dref(
        parsed_capabilities: *mut DDCA_Capabilities,
        ddca_dref: DDCA_Display_Ref,
        depth: ::std::os::raw::c_int,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_report_parsed_capabilities_by_dh(
        p_caps: *mut DDCA_Capabilities,
        ddca_dh: DDCA_Display_Handle,
        depth: ::std::os::raw::c_int,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_report_parsed_capabilities(
        parsed_capabilities: *mut DDCA_Capabilities,
        depth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ddca_feature_list_from_capabilities(
        parsed_caps: *mut DDCA_Capabilities,
    ) -> DDCA_Feature_List;
}
extern "C" {
    pub fn ddca_get_mccs_version_by_dh(
        ddca_dh: DDCA_Display_Handle,
        p_vspec: *mut DDCA_MCCS_Version_Spec,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_enable_udf(onoff: bool) -> bool;
}
extern "C" {
    pub fn ddca_is_udf_enabled() -> bool;
}
extern "C" {
    pub fn ddca_dfr_check_by_dref(ddca_dref: DDCA_Display_Ref) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_dfr_check_by_dh(ddca_dh: DDCA_Display_Handle) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_get_feature_metadata_by_vspec(
        feature_code: DDCA_Vcp_Feature_Code,
        vspec: DDCA_MCCS_Version_Spec,
        create_default_if_not_found: bool,
        meta_loc: *mut *mut DDCA_Feature_Metadata,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_get_feature_metadata_by_dref(
        feature_code: DDCA_Vcp_Feature_Code,
        ddca_dref: DDCA_Display_Ref,
        create_default_if_not_found: bool,
        meta_loc: *mut *mut DDCA_Feature_Metadata,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_get_feature_metadata_by_dh(
        feature_code: DDCA_Vcp_Feature_Code,
        ddca_dh: DDCA_Display_Handle,
        create_default_if_not_found: bool,
        meta_loc: *mut *mut DDCA_Feature_Metadata,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_free_feature_metadata(metadata: *mut DDCA_Feature_Metadata);
}
extern "C" {
    pub fn ddca_get_feature_name(
        feature_code: DDCA_Vcp_Feature_Code,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ddca_get_simple_nc_feature_value_name_by_table(
        feature_value_table: *mut DDCA_Feature_Value_Entry,
        feature_value: u8,
        value_name_loc: *mut *mut ::std::os::raw::c_char,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_dbgrpt_feature_metadata(
        md: *mut DDCA_Feature_Metadata,
        depth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ddca_report_display_by_dref(
        dref: DDCA_Display_Ref,
        depth: ::std::os::raw::c_int,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_feature_list_id_name(
        feature_set_id: DDCA_Feature_Subset_Id,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ddca_get_feature_list_by_dref(
        feature_set_id: DDCA_Feature_Subset_Id,
        dref: DDCA_Display_Ref,
        include_table_features: bool,
        feature_list_loc: *mut DDCA_Feature_List,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_feature_list_clear(vcplist: *mut DDCA_Feature_List);
}
extern "C" {
    pub fn ddca_feature_list_add(
        vcplist: *mut DDCA_Feature_List,
        vcp_code: u8,
    ) -> DDCA_Feature_List;
}
extern "C" {
    pub fn ddca_feature_list_contains(vcplist: DDCA_Feature_List, vcp_code: u8) -> bool;
}
extern "C" {
    pub fn ddca_feature_list_eq(vcplist1: DDCA_Feature_List, vcplist2: DDCA_Feature_List) -> bool;
}
extern "C" {
    pub fn ddca_feature_list_or(
        vcplist1: DDCA_Feature_List,
        vcplist2: DDCA_Feature_List,
    ) -> DDCA_Feature_List;
}
extern "C" {
    pub fn ddca_feature_list_and(
        vcplist1: DDCA_Feature_List,
        vcplist2: DDCA_Feature_List,
    ) -> DDCA_Feature_List;
}
extern "C" {
    pub fn ddca_feature_list_and_not(
        vcplist1: DDCA_Feature_List,
        vcplist2: DDCA_Feature_List,
    ) -> DDCA_Feature_List;
}
extern "C" {
    pub fn ddca_feature_list_count(feature_list: DDCA_Feature_List) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ddca_feature_list_string(
        feature_list: DDCA_Feature_List,
        value_prefix: *const ::std::os::raw::c_char,
        sepstr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ddca_free_table_vcp_value(table_value: *mut DDCA_Table_Vcp_Value);
}
extern "C" {
    pub fn ddca_free_any_vcp_value(valrec: *mut DDCA_Any_Vcp_Value);
}
extern "C" {
    pub fn ddca_get_non_table_vcp_value(
        ddca_dh: DDCA_Display_Handle,
        feature_code: DDCA_Vcp_Feature_Code,
        valrec: *mut DDCA_Non_Table_Vcp_Value,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_get_table_vcp_value(
        ddca_dh: DDCA_Display_Handle,
        feature_code: DDCA_Vcp_Feature_Code,
        table_value_loc: *mut *mut DDCA_Table_Vcp_Value,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_get_any_vcp_value_using_explicit_type(
        ddca_dh: DDCA_Display_Handle,
        feature_code: DDCA_Vcp_Feature_Code,
        value_type: DDCA_Vcp_Value_Type,
        valrec_loc: *mut *mut DDCA_Any_Vcp_Value,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_get_any_vcp_value_using_implicit_type(
        ddca_dh: DDCA_Display_Handle,
        feature_code: DDCA_Vcp_Feature_Code,
        valrec_loc: *mut *mut DDCA_Any_Vcp_Value,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_format_table_vcp_value_by_dref(
        feature_code: DDCA_Vcp_Feature_Code,
        ddca_dref: DDCA_Display_Ref,
        table_value: *mut DDCA_Table_Vcp_Value,
        formatted_value_loc: *mut *mut ::std::os::raw::c_char,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_format_non_table_vcp_value_by_dref(
        feature_code: DDCA_Vcp_Feature_Code,
        dref: DDCA_Display_Ref,
        valrec: *mut DDCA_Non_Table_Vcp_Value,
        formatted_value_loc: *mut *mut ::std::os::raw::c_char,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_format_any_vcp_value_by_dref(
        feature_code: DDCA_Vcp_Feature_Code,
        dref: DDCA_Display_Ref,
        valrec: *mut DDCA_Any_Vcp_Value,
        formatted_value_loc: *mut *mut ::std::os::raw::c_char,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_set_non_table_vcp_value(
        ddca_dh: DDCA_Display_Handle,
        feature_code: DDCA_Vcp_Feature_Code,
        hi_byte: u8,
        lo_byte: u8,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_set_table_vcp_value(
        ddca_dh: DDCA_Display_Handle,
        feature_code: DDCA_Vcp_Feature_Code,
        new_value: *mut DDCA_Table_Vcp_Value,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_set_any_vcp_value(
        ddca_dh: DDCA_Display_Handle,
        feature_code: DDCA_Vcp_Feature_Code,
        new_value: *mut DDCA_Any_Vcp_Value,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_get_profile_related_values(
        ddca_dh: DDCA_Display_Handle,
        profile_values_string_loc: *mut *mut ::std::os::raw::c_char,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_set_profile_related_values(
        ddca_dh: DDCA_Display_Handle,
        profile_values_string: *mut ::std::os::raw::c_char,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_register_display_status_callback(
        func: DDCA_Display_Status_Callback_Func,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_unregister_display_status_callback(
        func: DDCA_Display_Status_Callback_Func,
    ) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_display_event_class_name(
        event_class: DDCA_Display_Event_Class,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ddca_display_event_type_name(
        event_type: DDCA_Display_Event_Type,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ddca_start_watch_displays(enabled_classes: DDCA_Display_Event_Class) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_stop_watch_displays(wait: bool) -> DDCA_Status;
}
extern "C" {
    pub fn ddca_get_active_watch_classes(classes_loc: *mut DDCA_Display_Event_Class)
        -> DDCA_Status;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
